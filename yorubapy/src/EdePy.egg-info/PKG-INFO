Metadata-Version: 2.4
Name: EdePy
Version: 0.1.0
Summary: Yorùbá to Python transpiler and CLI (tokenize-based)
Author-email: Your Name <you@example.com>
License: MIT
Project-URL: Homepage, https://example.com
Project-URL: Repository, https://example.com/repo
Keywords: yoruba,python,transpiler,tokenize,localization,edepy
Requires-Python: >=3.8
Description-Content-Type: text/markdown

# EdePy

Run Yorùbá-flavored Python using a tokenize-based transpiler and CLI with native Yorùbá error messages.

## Install (editable)

```bash
pip install -e .
```

## Usage

```bash
edepy example.yoruba              # translate and run
edepy -e example.yoruba           # show translated Python only
edepy -o out.py example.yoruba    # write translated Python to file
edepy -y example.yoruba           # run with Yorùbá error messages
```

## Language Mapping (Plain Yorùbá - No Accents)

### Control Flow

- `ise` → `def` (function definition)
- `pada` → `return`
- `ti` → `if`
- `bibeeko` → `else`
- `bibeeko_ti` → `elif`
- `nigbati` → `while`
- `fun` → `for`
- `ni` → `in`
- `gbeyanju` → `try`
- `mu` → `except`
- `keyin` → `finally`
- `da` → `break`
- `tesiwaju` → `continue`

### Logic & Comparison

- `ati` → `and`
- `tabi` → `or`
- `kii_se` → `not`
- `je` → `is`
- `kii_se_ni` → `is not`

### Data Types & Builtins

- `beeni` → `True`
- `rara` → `False`
- `ohunkohun` → `None`
- `so` → `print`
- `wole` → `input`
- `gigun` → `len`
- `akooke` → `str`
- `nomb` → `int`
- `nomb_ona` → `float`
- `akojo` → `list`
- `awon_oro` → `dict`

### Classes & OOP

- `kilasi` → `class`
- `iru` → `type`

## Examples

### Simple Example

File: `example.yoruba`

```text
ise fi_ka(nomb):
    pada nomb * 2

so(fi_ka(5))
```

### Complex Calculator App

File: `complex_example.yoruba`

```text
kilasi Isiro:
    ise __init__(self, oruko):
        self.oruko = oruko
        self.akojo_isiro = akojo()

    ise se_isiro(self, a, b, ona):
        ti ona == "+":
            pada a + b
        bibeeko_ti ona == "*":
            pada a * b
        # ... more operations

# Interactive calculator with Yoruba interface
isiro = Isiro("Yoruba")
isiro.se_isiro_agbaye_loop()
```

## Error Messages in Yorùbá

Use the `-y` flag to see error messages in Yorùbá:

```bash
edepy -y error_test.yoruba
```

Common error translations:

- `NameError` → `Asise Oruko:`
- `TypeError` → `Asise Iru:`
- `ValueError` → `Asise Iyi:`
- `IndexError` → `Asise Ipin:`
- `ZeroDivisionError` → `Asise Pinya:`
- `FileNotFoundError` → `Faiili Ko Si:`

## How It Works

1. **Tokenization**: Uses Python's `tokenize` module to parse Yorùbá code
2. **Translation**: Replaces only NAME tokens that match the mapping
3. **Preservation**: Keeps strings, comments, indentation, and non-keyword tokens intact
4. **Execution**: Compiles and runs the translated Python code
5. **Error Handling**: Optionally translates Python error messages to Yorùbá

## Extending the Language

Add new keywords in `src/yorubapy/transpile.py`:

```python
BASE_MAPPING: Dict[str, str] = {
    # ... existing mappings
    "oro_kin": "first",        # new keyword
    "oro_kehin": "last",       # new keyword
}
```

## Testing

```bash
# Test simple example
edepy example.yoruba

# Test complex calculator
edepy complex_example.yoruba

# Test error handling
edepy -y error_test.yoruba

# Show translated Python
edepy -e complex_example.yoruba
```

## Features

✅ **Real Python Apps**: Transpiles to valid Python that runs normally  
✅ **Plain Yorùbá Keywords**: Easy-to-type keywords without accents  
✅ **Error Messages**: Native Yorùbá error messages with `-y` flag  
✅ **Token Safety**: Only replaces actual code tokens, preserves strings/comments  
✅ **Complex Programs**: Supports classes, functions, loops, error handling  
✅ **CLI Options**: Translate, emit, run, or save to file

## Next Steps

- Add more Yorùbá idioms and expressions
- Support for multi-word keywords (e.g., "bibeeko ti" → "elif")
- Standard library wrappers with Yorùbá names
- Interactive REPL mode
- Package management for Yorùbá modules
